buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
apply from: rootProject.file("BuildScripts/version.gradle")

archivesBaseName = "CustomSkinLoader_Forge1.14"
version = getCSLVersion()
group = "customskinloader"

sourceCompatibility = targetCompatibility = 1.6
compileJava {
    sourceCompatibility = targetCompatibility = 1.6
}
jar {
    exclude 'net/minecraft/client/renderer/texture/NativeImage.class'
    exclude 'net/minecraft/client/Minecraft.class'
    exclude 'net/minecraftforge/fml/common/Mod.class'
}
sourceSets {
    main {
        java {
            //Common
            srcDir '../Common/source'
            //Forge 1.14
            srcDir 'source'
        }
        resources {
            //Common
            srcDir '../Common/resource'
            exclude 'Profile.json'
            //Forge
            srcDir '../Forge/resource'
            exclude 'mcmod.info'
        }
    }
}

minecraft {
    version = config.forge_mc_version + "-" + config.forge_version
    runDir = "run"
    mappings = config.mappings_version

    replace '@MOD_VERSION@', rootProject.ext.config.version
    replace '@MOD_FULL_VERSION@', project.version
    replaceIn 'CustomSkinLoader.java'
}

processResources {
    filesNotMatching("**/*.js"){
    expand([
            modVersion    : rootProject.ext.config.version,
            modFullVersion: project.version,
            mcVersion     : config.minecraft_version,
            mcFullVersions: config.minecraft_full_versions,
            forgeVersion  : config.forge_version,
            gitVersion    : System.getenv("CIRCLE_SHA1"),
            buildUrl      : System.getenv("CIRCLE_BUILD_URL")
    ])}
}

apply from: rootProject.file("BuildScripts/remap.gradle")
task afterBuild {
    doLast {
        //renameSrgJar
        def file0 = file("build/libs/${archivesBaseName}-${version}.jar")
        def file1 = file("build/libs/${archivesBaseName}-${version}-srg.jar")
        file0.renameTo(file1)

        //reobfSrgToNotch
        reobfSrgToNotch()
        
        //copyBuildFile
        copy {
            from 'build/libs'
            into '../build/libs'
            include '**/*.jar'
            exclude '**/*-sources.jar'
            exclude '**/*-srg.jar'
        }
    }
}
build.finalizedBy afterBuild
